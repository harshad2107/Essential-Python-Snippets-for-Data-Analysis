                                                ## READING FILES ## 
# csv/tsv files
df = pd.read_csv(r"csv_file_path")

# Excel Fiel
df = pd.read_excel(r"excel_file_path")

# Reading Binary Excel File
pip install pyxlsb
df = pd.read_excel(r"binary_excel_file_path", engine='pyxlsb')

# JSON File
df = pd.read_json(r"json_file_path")

# Reading a Parquet file
df = pd.read_parquet(r"parquet_file_path")

# HTML file
df_list = pd.read_html(html_file_path)
df_html = df_list[0]

# xml file
df = pd.read_xml(r"xml_file_path")


## When you face encoding error

df = pd.read_csv(r"csv_file_path",encoding="ISO-8859-1")

encoding="utf-8" # Use utf-8 when you are dealing with text files that include characters from various languages, emojis, or any other Unicode characters.

encoding="ISO-8859-1" # Use ISO-8859-1 when you are working with text files that are specifically in Western European languages, especially if the files are older or come from older systems that used this encoding.

encoding="ascii" # Use ascii only when you are certain that your text file contains only basic English characters and no special characters or accents

encoding="utf-16" #  Use utf-16 when you are dealing with text files that require a large character set, such as files that include many different languages and symbols.

encoding="windows-1252" # Use windows-1252 when you are dealing with text files from Windows systems that are in Western European languages and include characters not covered by ISO-8859-1.


# Used only when we require specific columns
usecols=need_cols
on_bad_lines="skip" = to skip some records that have problem while reading

## When u want to read second sheet in excel    /first_sheet=index=0, second_sheet = index-1
filr = pd.read_excel(r"C:\Users\ISFL-44577\Downloads\SEP_Summary.xlsx",sheet_name=1)

## Give column names
br1.columns=colum_name 
colum_name =['SegmentID_Client','MemberID','BranchID','GroupID','SubGroupID']


                                     
                                                     ## Understanding the Dataset ##

df.shape
df.sample(5)
df.duplicated().sum()
df.describe()
df.columns


## Performing some Data Visualizations to understand Dataset

import matplotlib.pyplot as plt
import seaborn as sns

# Histogram
plt.figure(figsize=(8, 6))
sns.histplot(data['numeric_column'], kde=True, color='skyblue')
plt.title('Histogram of Numeric Column')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.show()

# Boxplot 
plt.figure(figsize=(8, 6))
sns.boxplot(x='category_column', y='numeric_column', data=data, palette='viridis')
plt.title('Box Plot of Numeric Column by Category')
plt.xlabel('Category')
plt.ylabel('Value')
plt.xticks(rotation=45)
plt.show()

# Scatterplot 
plt.figure(figsize=(8, 6))
sns.scatterplot(x='numeric_column1', y='numeric_column2', data=data, hue='category_column', palette='viridis')
plt.title('Scatter Plot of Numeric Columns')
plt.xlabel('Numeric Column 1')
plt.ylabel('Numeric Column 2')
plt.show()

# Piechart
plt.figure(figsize=(8, 8))
category_counts = data['category_column'].value_counts()
plt.pie(category_counts, labels=category_counts.index, autopct='%1.1f%%', colors=sns.color_palette('viridis', len(category_counts)))
plt.title('Pie Chart of Category Column')
plt.show()




                                              ## Handiling and Finding duplicates ##

# Duplicates in specific column
df['ACCOUNT_NUMBER'].duplicated()

# When u want both duplicates
both_acc_dupli = df[df.duplicated(subset='Account_no',keep=False)]

# To remove duplicates
df.drop_duplicates('Account_No',keep='first',inplace=True)



                                          ## PIVOT Tables to deep dive into Dataset ##
## Pivot table for simple representation
## df_june = dataset name

pivot_table = pd.pivot_table(df_june, 
                              index='ACCOUNT_NBR', 
                              values='current_balance', 
                              aggfunc={'ACCOUNT_NBR': 'count', 'current_balance': 'sum'})
pivot_table = pivot_table.rename(columns={'account_number': 'Count', 'current_balance': 'Sum'})
print(pivot_table)



df1_192_final = df1_192.pivot_table(index=['AccountID_with_s'],values=['ExcessPaid_april'],aggfunc='sum')



pivot_table.reset_index(inplace=True)

#
incomechange[(incomechange['ClosedDate'] <= '31 May 2024')&(incomechange['CurrentprincipalOutstanding']>0)]['Closure Type'].value_counts()

#
incomechange[incomechange['Closure Type'].notnull()]['LoanStatusID'].value_counts()



                                                ## Dates Conversion ##


# If date format is 2020-09-29 and want to convert it into 29-09-2020 then 
matchingdateess['FirstDisbursementDate'] = pd.to_datetime(matchingdateess['FirstDisbursementDate'])
matchingdateess['FirstDisbursementDate'] = matchingdateess['FirstDisbursementDate'].dt.strftime('%d-%m-%Y')

# for matching dates from one dataframe
matchingdates = needdate[needdate['SVC_CNCT_DT']==needdate['DisbursementDate']]

# Convert the 'date' column to a datetime format
dump['cycle_date'] = pd.to_datetime(dump['cycle_date'], format='%Y%m%d')

# Find the minimum and maximum dates

min_date = dump['cycle_date'].min()
max_date = dump['cycle_date'].max()

## To find total null values in all Columns
monthcdf.isna().sum()

## To find length 
df['ACCT_NBR'] = df['ACCT_NBR'].astype(str)
df['ACCT_NBR'].str.len().value_counts()
